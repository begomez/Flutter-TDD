// This file has been generated by the reflectable package.
// https://github.com/dart-lang/reflectable.
// @dart = 2.12

import 'dart:core';
import 'package:junit/custom_reflectable.dart' as prefix0;
import 'package:junit/test_case.dart' as prefix2;
import 'package:junit/was_run.dart' as prefix1;

// ignore_for_file: camel_case_types
// ignore_for_file: implementation_imports
// ignore_for_file: prefer_adjacent_string_concatenation
// ignore_for_file: prefer_collection_literals
// ignore_for_file: unnecessary_const

// ignore:unused_import
import 'package:reflectable/mirrors.dart' as m;
// ignore:unused_import
import 'package:reflectable/src/reflectable_builder_based.dart' as r;
// ignore:unused_import
import 'package:reflectable/reflectable.dart' as r show Reflectable;

final _data = <r.Reflectable, r.ReflectorData>{
  const prefix0.CustomReflectable(): r.ReflectorData(
      <m.TypeMirror>[
        r.NonGenericClassMirrorImpl(
            r'WasRun',
            r'.WasRun',
            7,
            0,
            const prefix0.CustomReflectable(),
            const <int>[-1],
            null,
            null,
            -1,
            {},
            {},
            {
              r'': (bool b) => (name, {wasRun = false}) =>
                  b ? prefix1.WasRun(name, wasRun: wasRun) : null
            },
            -1,
            -1,
            const <int>[-1],
            null,
            {
              r'==': 1,
              r'toString': 0,
              r'noSuchMethod': 1,
              r'hashCode': 0,
              r'runtimeType': 0,
              r'run': 0,
              r'name': 0,
              r'name=': 1,
              r'setUp': 0,
              r'testMethod': 0,
              r'wasRun': 0,
              r'wasRun=': 1,
              r'log': 0,
              r'log=': 1
            }),
        r.NonGenericClassMirrorImpl(
            r'TestCase',
            r'.TestCase',
            519,
            1,
            const prefix0.CustomReflectable(),
            const <int>[-1],
            null,
            null,
            -1,
            {},
            {},
            {},
            -1,
            -1,
            const <int>[-1],
            null,
            {
              r'==': 1,
              r'toString': 0,
              r'noSuchMethod': 1,
              r'hashCode': 0,
              r'runtimeType': 0,
              r'run': 0,
              r'name': 0,
              r'name=': 1
            })
      ],
      null,
      null,
      <Type>[prefix1.WasRun, prefix2.TestCase],
      2,
      {
        r'==': (dynamic instance) => (x) => instance == x,
        r'toString': (dynamic instance) => instance.toString,
        r'noSuchMethod': (dynamic instance) => instance.noSuchMethod,
        r'hashCode': (dynamic instance) => instance.hashCode,
        r'runtimeType': (dynamic instance) => instance.runtimeType,
        r'run': (dynamic instance) => instance.run,
        r'name': (dynamic instance) => instance.name,
        r'setUp': (dynamic instance) => instance.setUp,
        r'testMethod': (dynamic instance) => instance.testMethod,
        r'wasRun': (dynamic instance) => instance.wasRun,
        r'log': (dynamic instance) => instance.log
      },
      {
        r'name=': (dynamic instance, value) => instance.name = value,
        r'wasRun=': (dynamic instance, value) => instance.wasRun = value,
        r'log=': (dynamic instance, value) => instance.log = value
      },
      null,
      [
        const [0, 0, null],
        const [1, 0, null],
        const [
          1,
          0,
          const [#wasRun]
        ]
      ])
};

final _memberSymbolMap = null;

void initializeReflectable() {
  r.data = _data;
  r.memberSymbolMap = _memberSymbolMap;
}
